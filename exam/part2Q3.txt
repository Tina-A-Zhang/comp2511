Decorator Pattern is a structural pattern, which is used to attach additional reponsibilities to an object dynamically, it provides a flexible alternative to subclassing for extending functionality. Builder Pattern is a creational pattern, which is used to separete the construction of a complex object from its representation so that the same construction process can create different representations. Both patterns are used to solve the problem of too many subclasses. It is better to use Decorator pattern when a object reponsibilities and behaviours should be dynamically added/removed, concrete implementations should be decoupled from reponsibilities and behaviours, and subclassing is too costly to dynamically add/remove reponsibilities.